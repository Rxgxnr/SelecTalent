import streamlit as st
from openai import OpenAI
import fitz
import pandas as pd
from docx import Document
from io import BytesIO
import plotly.express as px
import re

# --- Configuraci√≥n Inicial ---
st.set_page_config(page_title="Bienvenido/a a SelecTalent", layout="centered")
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# --- Inicializaci√≥n de Estados ---
for key in ["archivos_cv", "resultados", "descriptor", "nombre_cargo", "resumen_descriptor"]:
    if key not in st.session_state:
        st.session_state[key] = [] if "cv" in key or key == "resultados" else ""

# --- Funciones Clave ---
def extraer_texto_pdf(file):
    try:
        doc = fitz.open(stream=file.read(), filetype="pdf")
        return "".join([page.get_text() for page in doc])
    except Exception as e:
        return f"‚ùå Error al leer PDF: {e}"

def generar_descriptor(p1, p2, p3):
    prompt = f"""Act√∫a como un Agente de Recursos Humanos experto.
Solicita al usuario informaci√≥n sobre la empresa, el √°rea que contratar√°, el objetivo general del puesto, principales funciones, requisitos acad√©micos, experiencia laboral deseada, habilidades t√©cnicas y competencias blandas.
Con esta informaci√≥n, genera un Descriptor de Cargo completo, siguiendo el formato est√°ndar:
1. ¬øQu√© tipo de cargo buscas?: {p1}
2. ¬øQu√© conocimientos t√©cnicos o habilidades necesita?: {p2}
3. ¬øQu√© perfil humano o experiencia previa es deseable?: {p3}
El descriptor debe ser claro, formal y ordenado, listo para usarse en procesos de reclutamiento."""
    response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
    return response.choices[0].message.content.strip()

def generar_resumen_descriptor(descriptor):
    prompt = f"""Act√∫a como un Agente de Recursos Humanos experto.
Si el usuario ya tiene un Descriptor de Cargo (por ejemplo, en formato PDF o Word), solicita que lo adjunte.
Una vez recibido, haz un resumen ejecutivo del Descriptor,
{descriptor} El resumen debe ser breve, directo y servir como base para evaluar CVs."""
    response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
    return response.choices[0].message.content.strip()

def analizar_cv(descriptor, texto_cv):
    prompt = f"""Act√∫a como un Agente de Recursos Humanos experto.
Analiza el siguiente CV en funci√≥n del Descriptor de Cargo entregado.

Descriptor del cargo:
{descriptor}

Curr√≠culum del candidato:
{texto_cv}

---

Para cada candidato, realiza lo siguiente:

**Evaluar Formaci√≥n Acad√©mica:**
- Comparar si el t√≠tulo cumple, excede o no cumple los requisitos del cargo.

**Evaluar Experiencia Laboral:**
- Verificar si el candidato tiene experiencia en las funciones clave solicitadas y en el sector relevante.
- Evaluar si tiene la cantidad de a√±os de experiencia requerida o m√°s.

**Evaluar Habilidades T√©cnicas:**
- Confirmar si maneja las herramientas, programas o conocimientos t√©cnicos requeridos.

**Evaluar Competencias Blandas:**
- Revisar si el CV demuestra habilidades como liderazgo, trabajo en equipo, planificaci√≥n, comunicaci√≥n, etc., solicitadas en el perfil.

**Identificar Fortalezas y Debilidades:**
- Mencionar las principales fortalezas (lo que aporta valor al cargo).
- Mencionar las principales debilidades (lo que puede limitar su desempe√±o en el cargo).

**Asignar Nota de Afinidad al Cargo:**
- Muy Alta: Cumple 90%-100% de los requisitos. Es ideal para el cargo.
- Alta: Cumple entre 75%-89% de los requisitos. Puede adaptarse r√°pidamente.
- Media: Cumple entre 50%-74% de los requisitos. Requiere entrenamiento o experiencia adicional.
- Baja: Cumple entre 25%-49% de los requisitos. Hay brechas importantes.
- Muy Baja: Cumple menos del 25% de los requisitos. No recomendado.

Presenta la informaci√≥n final de forma ordenada, usando tablas o listas si es posible.

Indica claramente si el candidato es **recomendado o no** para avanzar a la etapa de entrevista.

üîî Notas adicionales que el sistema debe considerar autom√°ticamente:
- Si un candidato no tiene el t√≠tulo exigido (por ejemplo, t√≠tulo profesional espec√≠fico), eso es una brecha cr√≠tica.
- Si no tiene experiencia liderando equipos (cuando el cargo lo requiere), debe ser se√±alado como debilidad relevante.
- Si domina herramientas cr√≠ticas como SAP, Power BI, etc., debe sumarse como fortaleza adicional.
- Las competencias blandas que se puedan inferir de actividades extracurriculares o certificaciones tambi√©n deben ser consideradas.
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()
    
def extraer_nota(texto):
    import re
    categorias = ["Muy Alta", "Alta", "Media", "Baja", "Muy Baja"]
    for cat in categorias:
        if cat.lower() in texto.lower():
            return cat
    return "Sin Clasificar"

def generar_word(resultados, nombre_cargo):
    doc = Document()
    doc.add_heading(f"Detalle de An√°lisis para el Cargo: {nombre_cargo}", level=1)
    for r in resultados:
        doc.add_heading(r["nombre"], level=2)
        doc.add_paragraph(r["resultado"])
        doc.add_page_break()
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer, f"Detalle ({nombre_cargo}).docx"

def mostrar_grafico_ranking(resumen):
    df = pd.DataFrame(resumen)

    orden_afinidad = ["Muy Alta", "Alta", "Media", "Baja", "Muy Baja"]
    mapa_numerico = {"Muy Alta": 5, "Alta": 4, "Media": 3, "Baja": 2, "Muy Baja": 1}

    df["Nivel Afinidad"] = pd.Categorical(df["Nota de Afinidad"], categories=orden_afinidad, ordered=True)
    df = df.sort_values("Nivel Afinidad")
    df["Afinidad Num√©rica"] = df["Nota de Afinidad"].map(mapa_numerico)

    fig = px.bar(
        df,
        x="Nombre CV",
        y="Afinidad Num√©rica",
        color="Nota de Afinidad",
        text="Nota de Afinidad",
        title="Ranking de Afinidad (Categor√≠as)",
        category_orders={"Nota de Afinidad": orden_afinidad}
    )
    fig.update_traces(textposition='outside')
    st.plotly_chart(fig, use_container_width=True)

# --- Bot√≥n para reiniciar ---
if st.button("üîÑ Consultar Otro Cargo"):
    st.session_state.clear()
    st.rerun()

# --- T√≠tulo Principal ---
st.title("ü§ñ SelecTalent: An√°lisis de CV con IA")

# --- Entrada de Descriptor ---
modo = st.radio("¬øQuieres cargar un descriptor o prefieres que te ayude?", ["üìÇ Cargar Descriptor", "üí¨ Hacer Preguntas"])

if modo == "üìÇ Cargar Descriptor":
    archivo = st.file_uploader("Sube un descriptor en .txt o .pdf", type=["txt", "pdf"])
    if archivo:
        descriptor = archivo.read().decode("utf-8") if archivo.type == "text/plain" else extraer_texto_pdf(archivo)
        st.session_state.descriptor = descriptor
        st.session_state.nombre_cargo = archivo.name.rsplit(".", 1)[0]
        if not st.session_state.resumen_descriptor:
            st.session_state.resumen_descriptor = generar_resumen_descriptor(descriptor)
        st.success("‚úÖ Descriptor cargado correctamente.")

elif modo == "üí¨ Hacer Preguntas":
    with st.form("formulario"):
        p1 = st.text_input("¬øQu√© tipo de cargo buscas?")
        p2 = st.text_input("¬øQu√© habilidades o conocimientos debe tener?")
        p3 = st.text_input("¬øQu√© perfil humano o experiencia previa es deseable?")
        enviar = st.form_submit_button("Generar descriptor")
    if enviar:
        st.session_state.descriptor = generar_descriptor(p1, p2, p3)
        st.session_state.nombre_cargo = p1
        st.session_state.resumen_descriptor = generar_resumen_descriptor(st.session_state.descriptor)
        st.success("‚úÖ Descriptor generado correctamente.")

# --- An√°lisis de CVs ---
if st.session_state.descriptor:
    st.subheader(f"üìù Descriptor: {st.session_state.nombre_cargo}")
    st.text_area("Contenido del descriptor:", st.session_state.descriptor, height=150)
    st.info(f"üìå **Resumen del Descriptor:**\n{st.session_state.resumen_descriptor}")

    st.divider()
    st.subheader("üìÑ Carga los CVs en PDF")
    archivos_cv = st.file_uploader("Selecciona uno o varios archivos", type=["pdf"], accept_multiple_files=True)
    if archivos_cv:
        st.session_state.archivos_cv = archivos_cv

    if st.session_state.archivos_cv:
        if st.button("üîç Analizar CVs"):
            resultados, resumen = [], []
            for archivo in st.session_state.archivos_cv:
                texto = extraer_texto_pdf(archivo)
                if texto.startswith("‚ùå"):
                    st.error(f"{archivo.name}: {texto}")
                    continue
                with st.spinner(f"Analizando {archivo.name}..."):
                    resultado = analizar_cv(st.session_state.descriptor, texto)
                nota = extraer_nota(resultado)
                resultados.append({"nombre": archivo.name, "resultado": resultado, "nota": nota})
                resumen.append({
    "Nombre CV": archivo.name,
    "Cargo": st.session_state.nombre_cargo,
    "Nota de Afinidad": nota  # ‚Üê esto ser√° "Alta", "Media", etc.
})
                st.success(f"‚úÖ CV '{archivo.name}' analizado con √©xito")
            st.session_state.resultados = resultados
            st.session_state.resumen = resumen

# --- Exportaci√≥n y Visualizaci√≥n ---
if st.session_state.resultados:
    st.divider()
    st.subheader("üìä Ranking Visual de Afinidad (Categor√≠as)")
    mostrar_grafico_ranking(st.session_state.resumen)

    st.divider()
    st.subheader("üì• Exportar Resultados")
    col1, col2 = st.columns(2)
    with col1:
        df = pd.DataFrame(st.session_state.resumen)
        excel_buffer = BytesIO()
        df.to_excel(excel_buffer, index=False)
        excel_buffer.seek(0)
        st.download_button("üìä Descargar Excel", excel_buffer, file_name=f"Nota ({st.session_state.nombre_cargo}).xlsx")

    with col2:
        word_data, word_name = generar_word(st.session_state.resultados, st.session_state.nombre_cargo)
        st.download_button("üìÑ Descargar Word", word_data, file_name=word_name)
