import streamlit as st
from openai import OpenAI
import fitz
import pandas as pd
from docx import Document
from io import BytesIO
import plotly.express as px
import re

# --- Configuraci√≥n Inicial ---
st.set_page_config(page_title="Bienvenido/a a SelecTalent", layout="centered")
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# --- Inicializaci√≥n de Estados ---
for key in ["archivos_cv", "resultados", "descriptor", "nombre_cargo", "resumen_descriptor", "resumen"]:
    if key not in st.session_state:
        st.session_state[key] = [] if key in ["archivos_cv", "resultados", "resumen"] else ""

# --- Funciones Clave ---
def extraer_texto_pdf(file):
    try:
        doc = fitz.open(stream=file.read(), filetype="pdf")
        return "".join([page.get_text() for page in doc])
    except Exception as e:
        return f"‚ùå Error al leer PDF: {e}"

def generar_descriptor(p1, p2, p3):
    prompt = f"""Act√∫a como un Agente de Recursos Humanos experto. Necesito que generes un Descriptor de Cargo completo basado en:
1. Tipo de cargo: {p1}
2. Habilidades t√©cnicas necesarias: {p2}
3. Perfil humano deseable: {p3}

Instrucciones espec√≠ficas:
- Usa EXCLUSIVAMENTE categor√≠as textuales (Muy Alta, Alta, Media, Baja, Muy Baja) para cualquier evaluaci√≥n
- NO uses escalas num√©ricas (1-10, 1-100, porcentajes)
- El formato debe incluir:
  * Nombre del cargo
  * Objetivo principal
  * Funciones clave (lista numerada)
  * Requisitos acad√©micos
  * Experiencia requerida (especificando "Muy Alta/Alta/Media/Baja relevancia")
  * Habilidades t√©cnicas (clasificadas por importancia)
  * Competencias blandas requeridas
  * Condiciones laborales (opcional)"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

def generar_resumen_descriptor(descriptor):
    prompt = f"""Act√∫a como un especialista en Recursos Humanos. Resume este descriptor de cargo manteniendo:
{descriptor}

Instrucciones estrictas:
1. Usa SOLO categor√≠as textuales (Muy Alta, Alta, Media, Baja) para prioridades
2. Prohibido usar n√∫meros, porcentajes o escalas
3. Estructura el resumen en:
- Cargo y objetivo (1 l√≠nea)
- 3-5 funciones CR√çTICAS (indicar "Prioridad: [Muy Alta/Alta]")
- 3-5 requisitos ESENCIALES (indicar "Relevancia: [Muy Alta/Alta]")
- Perfil ideal resumido"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5
    )
    return response.choices[0].message.content.strip()

def analizar_cv(descriptor, texto_cv):
    prompt = f"""Act√∫a como un Agente de Recursos Humanos experto.
Analiza los CVs adjuntos en funci√≥n del Descriptor de Cargo resumido.
Descriptor del cargo: {descriptor}
Curr√≠culum del candidato: {texto_cv}

Para cada candidato, entrega:
1. Evaluaci√≥n de Formaci√≥n Acad√©mica
2. Evaluaci√≥n de Experiencia Laboral
3. Evaluaci√≥n de Habilidades T√©cnicas
4. Evaluaci√≥n de Competencias Blandas
5. Fortalezas
6. Debilidades
7. Nota de Afinidad al Cargo (Usar EXCLUSIVAMENTE una de estas categor√≠as: Muy Alta, Alta, Media, Baja, Muy Baja)

Presenta la informaci√≥n de forma ordenada y profesional, recomendando si el candidato deber√≠a avanzar a entrevista o no.
NO uses escalas num√©ricas (1-10 o 1-100), solo las categor√≠as textuales mencionadas."""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    texto = response.choices[0].message.content.strip()
    nota = extraer_nota(texto)
    return {"texto": texto, "nota": nota}

def extraer_nota(texto):
    categorias = ["Muy Alta", "Alta", "Media", "Baja", "Muy Baja"]
    for cat in categorias:
        if cat.lower() in texto.lower():
            return cat
    return "Sin Clasificar"

def generar_word(resultados, nombre_cargo):
    doc = Document()
    doc.add_heading(f"Reporte de An√°lisis - {nombre_cargo}", level=1)
    orden = {"Muy Alta": 0, "Alta": 1, "Media": 2, "Baja": 3, "Muy Baja": 4}
    ordenados = sorted(resultados, key=lambda x: orden.get(x["nota"], 5))
    for r in ordenados:
        doc.add_heading(r["nombre"], level=2)
        doc.add_paragraph(f"Nota de Afinidad: {r['nota']}", style='Intense Quote')
        doc.add_paragraph(r["texto"])
        doc.add_page_break()
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer, f"Reporte de An√°lisis - {nombre_cargo}.docx"

def mostrar_grafico_ranking(resumen):
    df = pd.DataFrame(resumen)
    orden = ["Muy Alta", "Alta", "Media", "Baja", "Muy Baja"]
    df["Nota de Afinidad"] = pd.Categorical(df["Nota de Afinidad"], categories=orden, ordered=True)
    fig = px.bar(
        df.sort_values("Nota de Afinidad"),
        x="Nombre CV",
        y="Nota de Afinidad",
        color="Nota de Afinidad",
        color_discrete_map={
            "Muy Alta": "#2ecc71", "Alta": "#27ae60", "Media": "#f39c12",
            "Baja": "#e74c3c", "Muy Baja": "#c0392b"
        },
        text="Nota de Afinidad",
        title="Ranking de Afinidad por Categor√≠a"
    )
    fig.update_traces(textposition='outside')
    st.plotly_chart(fig, use_container_width=True)

# --- Bot√≥n para reiniciar ---
if st.button("üîÑ Consultar Otro Cargo"):
    st.session_state.clear()
    st.rerun()

# --- Inicio de la App ---
st.title("ü§ñ SelecTalent: An√°lisis de CV con IA")

if st.session_state.get('descriptor'):
    st.sidebar.success(f"Cargo actual: {st.session_state.nombre_cargo}")

modo = st.radio("¬øQuieres cargar un descriptor o prefieres que te ayude?", ["üìÇ Cargar Descriptor", "üí¨ Hacer Preguntas"])

if modo == "üìÇ Cargar Descriptor":
    archivo = st.file_uploader("Sube un descriptor en .txt o .pdf", type=["txt", "pdf"])
    if archivo:
        descriptor = archivo.read().decode("utf-8") if archivo.type == "text/plain" else extraer_texto_pdf(archivo)
        st.session_state.descriptor = descriptor
        st.session_state.nombre_cargo = archivo.name.rsplit(".", 1)[0]
        with st.spinner("Generando resumen del descriptor..."):
            st.session_state.resumen_descriptor = generar_resumen_descriptor(descriptor)
        st.success("‚úÖ Descriptor cargado correctamente.")
        st.experimental_rerun()

elif modo == "üí¨ Hacer Preguntas":
    with st.form("formulario"):
        p1 = st.text_input("¬øQu√© tipo de cargo buscas?")
        p2 = st.text_input("¬øQu√© habilidades o conocimientos debe tener?")
        p3 = st.text_input("¬øQu√© perfil humano o experiencia previa es deseable?")
        enviar = st.form_submit_button("Generar descriptor")
    if enviar:
        st.session_state.descriptor = generar_descriptor(p1, p2, p3)
        st.session_state.nombre_cargo = p1
        st.session_state.resumen_descriptor = generar_resumen_descriptor(st.session_state.descriptor)
        st.success("‚úÖ Descriptor generado correctamente.")
        st.experimental_rerun()

if st.session_state.get("descriptor"):
    st.subheader(f"üìù Descriptor: {st.session_state.nombre_cargo}")
    with st.expander("Ver descriptor completo"):
        st.text_area("", st.session_state.descriptor, height=150, label_visibility="collapsed")
    st.info(f"üìå **Resumen del Descriptor:**
{st.session_state.resumen_descriptor}")

    st.divider()
    st.subheader("üìÑ Carga los CVs en PDF")
    archivos_cv = st.file_uploader("Selecciona uno o varios archivos", type=["pdf"], accept_multiple_files=True)

    if archivos_cv:
        st.session_state.archivos_cv = archivos_cv
        if st.button("üîç Analizar CVs"):
            resultados, resumen = [], []
            for archivo in archivos_cv:
                texto = extraer_texto_pdf(archivo)
                if texto.startswith("‚ùå"):
                    st.error(f"{archivo.name}: {texto}")
                    continue
                with st.spinner(f"Analizando {archivo.name}..."):
                    analisis = analizar_cv(st.session_state.descriptor, texto)
                    resultados.append({
                        "nombre": archivo.name,
                        "texto": analisis["texto"],
                        "nota": analisis["nota"]
                    })
                    resumen.append({
                        "Nombre CV": archivo.name,
                        "Cargo": st.session_state.nombre_cargo,
                        "Nota de Afinidad": analisis["nota"]
                    })
                st.success(f"‚úÖ CV '{archivo.name}' analizado con √©xito")
            st.session_state.resultados = resultados
            st.session_state.resumen = resumen
            st.experimental_rerun()

if st.session_state.get("resultados"):
    st.divider()
    st.subheader("üìä Ranking Visual de Afinidad")
    mostrar_grafico_ranking(st.session_state.resumen)

    st.divider()
    st.subheader("üì• Exportar Resultados")
    col1, col2 = st.columns(2)
    with col1:
        df = pd.DataFrame(st.session_state.resumen)
        excel_buffer = BytesIO()
        df.to_excel(excel_buffer, index=False)
        excel_buffer.seek(0)
        st.download_button("üìä Descargar Excel", excel_buffer, file_name=f"Resumen Afinidad - {st.session_state.nombre_cargo}.xlsx")
    with col2:
        word_data, word_name = generar_word(st.session_state.resultados, st.session_state.nombre_cargo)
        st.download_button("üìÑ Descargar Word", word_data, file_name=word_name)
